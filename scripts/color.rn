pub struct Color {
    r,
    g,
    b,
    rx,
    gx,
    bx,
    wrap,
}

impl Color {
    pub fn new(r, g, b, wrap) {
        Self {
            r,
            g,
            b,
            rx: 1,
            gx: 1,
            bx: 1,
            wrap,
        }
    }

    pub fn get_r(self) {
        self.r
    }

    pub fn get_g(self) {
        self.g
    }

    pub fn get_b(self) {
        self.b
    }

    pub fn set_r(self, r) {
        self.r = r;
    }

    pub fn set_g(self, g) {
        self.g = g;
    }

    pub fn set_b(self, b) {
        self.b = b;
    }

    pub fn add(self, r, g, b) {
        self.add_r(r);
        self.add_g(g);
        self.add_b(b);
    }

    pub fn add_r(self, v) {
        self.r += v * self.rx;
        if self.r < 0 {
            self.r = 0;
            if self.wrap {
                self.rx = 1;
            }
        } else if self.r >255 {
            self.r = 255;
            if self.wrap {
                self.rx = -1;
            }
        }
    }

    pub fn add_g(self, v) {
        self.g += v * self.gx;
        if self.g < 0 {
            self.g = 0;
            if self.wrap {
                self.gx = 1;
            }
        } else if self.g >255 {
            self.g = 255;
            if self.wrap {
                self.gx = -1;
            }
        }
    }

    pub fn add_b(self,v ) {
        self.b += v * self.bx;
        if self.b < 0 {
            self.b = 0;
            if self.wrap {
                self.bx = 1;
            }
        } else if self.b >255 {
            self.b = 255;
            if self.wrap {
                self.bx = -1;
            }
        }
    }
}
