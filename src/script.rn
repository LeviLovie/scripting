struct LocalData {
    update_counter,
}

impl LocalData {
    pub fn new() {
        return LocalData {
            update_counter: 0
        }
   }

    pub fn inc(self) {
        self.update_counter += 1;
    }

    pub fn get_update_counter(self) {
        return self.update_counter;
    }

    pub fn clear(self) {
        self.update_counter = 0;
    }
}

const LOCAL_DATA = 0;

pub fn start(data) {
    data.target_fps = 60;
    create_global(LOCAL_DATA, LocalData::new());
}

pub fn update(data) {
    let local_data = get_global(LOCAL_DATA);
    
    local_data.inc();
    if local_data.get_update_counter() > 100 {
        local_data.clear();
    }

    dbg!(`LocalData.counter: ${local_data.update_counter}, target: ${data.target_fps}, fps: ${data.fps}, delta: ${data.delta}, busy_delta: ${data.busy_delta}, rune_delta: ${data.rune_delta}`);

    set_global(LOCAL_DATA, local_data);
}

